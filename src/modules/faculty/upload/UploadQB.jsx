import React, { useState, useEffect, useRef, useCallback, useMemo } from "react";
import { useAuth } from "../../../auth/AuthContext";
import { useApiClient } from "../../../context/AuthorizedFetch";

// --- Re-using Utility Components from UploadNotes/UploadPYQ ---

// Inline SVG Upload Icon
const UploadIcon = (props) => (
  <svg {...props} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
    <path fill="currentColor" d="M288 109.3V352c0 17.7-14.3 32-32 32s-32-14.3-32-32V109.3l-73.4 73.4c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l128-128c12.5 12.5 32.8 12.5 45.3 0l128 128c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L288 109.3zM64 352H192c0 35.3 28.7 64 64 64s64-28.7 64-64H448c35.3 0 64 28.7 64 64v32c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V416c0-35.3 28.7-64 64-64z" />
  </svg>
);

// Inline SVG Close Icon
const TimesIcon = (props) => (
  <svg {...props} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
    <path fill="currentColor" d="M310.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L160 210.7 4.7 55.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L114.7 256 4.7 411.3c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 301.3 265.3 456.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L205.3 256 310.6 150.6z" />
  </svg>
);

// Message modal
const MessageModal = ({ message, type = "success", onClose }) => {
  const bg = type === "success" ? "bg-green-100 border-green-400 text-green-700" : "bg-red-100 border-red-400 text-red-700";
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div className={`rounded-xl border-l-4 p-4 shadow-xl max-w-sm w-full ${bg}`}>
        <div className="flex justify-between items-center">
          <p className="font-semibold">{type === "success" ? "Success!" : "Error!"}</p>
          <button onClick={onClose} className="text-xl font-bold hover:opacity-75">
            <TimesIcon className="h-5 w-5" />
          </button>
        </div>
        <p className="mt-2 text-sm">{message}</p>
      </div>
    </div>
  );
};

// Unique ID generator (Client-side temporary ID, usually generated by backend)
const generateUniqueId = () => `qb-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;

// --- Hardcoded Data (will be replaced by fetched data) ---
const BRANCHES = ["CSE", "CIVIL", "EEE", "ECE"];
const SEMESTERS = [1, 2, 3, 4, 5, 6, 7, 8];


const UploadQB = () => {
  const auth = useAuth();
  const apiClient = useApiClient();
  const apiRef = useRef(apiClient);
  useEffect(() => { apiRef.current = apiClient; }, [apiClient]);

  // --- States ---
  const [regulations, setRegulations] = useState([]);
  const [subjects, setSubjects] = useState([]);
  const [loading, setLoading] = useState({ regulations: false, subjects: false });
  const [error, setError] = useState(null);

  const [formData, setFormData] = useState({
    selectedRegulation: null,
    selectedBranch: "",
    selectedSemester: "",
    selectedSubjectCode: "",
    file: null, // Single file upload for the entire subject's QB
  });

  const fileInputRef = useRef(null);
  const [submissionStatus, setSubmissionStatus] = useState({ submitted: false, error: null, message: null });
  const [isUploading, setIsUploading] = useState(false);


  // --- Data Fetching Logic (Same as UploadNotes/UploadPYQ) ---

  // 1. Fetch regulations on mount
  useEffect(() => {
    let cancelled = false;
    const fetchRegulations = async () => {
      setLoading((s) => ({ ...s, regulations: true }));
      setError(null);
      try {
        const res = await apiRef.current("/getRegulationList", { method: "GET" });
        const data = await res.json();
        if (Array.isArray(data) && !cancelled) {
          setRegulations(data.map((r) => ({
            regulationId: r.regulationId ?? r.regulation ?? String(r),
            display: r.name ?? r.display ?? String(r),
          })));
        }
      } catch (err) {
        if (!cancelled) setError(err.message || "Network error fetching regulations.");
      } finally {
        if (!cancelled) setLoading((s) => ({ ...s, regulations: false }));
      }
    };
    fetchRegulations();
    return () => { cancelled = true; };
  }, []);

  // 2. Fetch subjects when regulation + branch + semester are all selected
  const currentSubjectParams = useMemo(() => ({
    regId: formData.selectedRegulation?.regulationId,
    branch: formData.selectedBranch,
    semester: formData.selectedSemester,
  }), [formData.selectedRegulation, formData.selectedBranch, formData.selectedSemester]);

  useEffect(() => {
    const { regId, branch, semester } = currentSubjectParams;

    if (!regId || !branch || !semester) {
      setSubjects([]);
      return;
    }

    let cancelled = false;
    const fetchSubjects = async () => {
      setLoading((s) => ({ ...s, subjects: true }));
      setError(null);
      setSubjects([]);

      const dto = {
        regulationId: regId,
        semester: Number(semester),
        branch: branch,
      };

      try {
        const res = await apiRef.current("/getNewSubjectList", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(dto),
        });

        const result = await res.json();

        if (result?.subject && typeof result.subject === "object" && !cancelled) {
          const list = Object.entries(result.subject).map(([code, name]) => ({ subjectCode: code, subjectName: name }));
          setSubjects(list);
        }
      } catch (err) {
        if (!cancelled) setError(err.message || "Network error fetching subjects.");
      } finally {
        if (!cancelled) setLoading((s) => ({ ...s, subjects: false }));
      }
    };

    fetchSubjects();

    return () => { cancelled = true; };
  }, [currentSubjectParams]);

  // --- Handlers ---
  const resetFileAndSubject = useCallback(() => {
    setFormData(prev => ({
      ...prev,
      selectedSubjectCode: "",
      file: null,
    }));
    if (fileInputRef.current) fileInputRef.current.value = "";
  }, []);

  const handleRegulationChange = useCallback((e) => {
    const id = e.target.value;
    const selected = regulations.find(r => r.regulationId === id) || null;
    setFormData(prev => ({
      ...prev,
      selectedRegulation: selected,
      selectedBranch: "",
      selectedSemester: "",
    }));
    resetFileAndSubject();
  }, [regulations, resetFileAndSubject]);

  const handleBranchChange = useCallback((e) => {
    const branch = e.target.value;
    setFormData(prev => ({ ...prev, selectedBranch: branch, selectedSemester: "" }));
    resetFileAndSubject();
  }, [resetFileAndSubject]);

  const handleSemesterChange = useCallback((e) => {
    const sem = e.target.value;
    setFormData(prev => ({ ...prev, selectedSemester: sem }));
    resetFileAndSubject();
  }, [resetFileAndSubject]);

  const handleSubjectChange = useCallback((e) => {
    const code = e.target.value;
    setFormData(prev => ({ ...prev, selectedSubjectCode: code, file: null }));
    if (fileInputRef.current) fileInputRef.current.value = "";
  }, []);

  const handleFileChange = useCallback((e) => {
    setFormData(prev => ({ ...prev, file: e.target.files[0] || null }));
  }, []);


  // --- Submission Logic ---

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmissionStatus({ submitted: false, error: null, message: null });

    const reg = formData.selectedRegulation;
    const facultyId = auth?.facultyId;

    if (!reg || !facultyId || !formData.selectedSubjectCode || !formData.file) {
      setSubmissionStatus({ submitted: true, error: true, message: "Please select Regulation, Subject, and upload a Question Bank file." });
      return;
    }

    setIsUploading(true);

    try {
      const fd = new FormData();
      // Append required metadata
      fd.append("materialId", generateUniqueId()); // Client-side unique ID
      fd.append("subjectCode", formData.selectedSubjectCode);
      fd.append("facultyId", facultyId);
      fd.append("regulationId", reg.regulationId);
      
      // Append file data
      fd.append("pdf", formData.file);
      fd.append("pdfName", `${formData.selectedSubjectCode}_QB_${formData.file.name}`); 

      // *** PLACEHOLDER ENDPOINT: /addNewQB ***
      const resp = await apiRef.current("/addNewQB", { method: "POST", body: fd }); 
      const resultText = await resp.text();
      
      if (resp.ok) {
        setSubmissionStatus({ submitted: true, error: false, message: `Successfully uploaded Question Bank for subject ${formData.selectedSubjectCode}!` });
        resetFileAndSubject();
      } else {
        console.error("Server error:", resultText);
        setSubmissionStatus({ submitted: true, error: true, message: `Upload failed: ${resultText || "Unknown server error."}` });
      }
    } catch (err) {
      console.error("Network or submission error:", err);
      setSubmissionStatus({ submitted: true, error: true, message: err.message || "An unexpected error occurred during upload." });
    } finally {
      setIsUploading(false);
    }
  };

  const closeMessage = () => setSubmissionStatus({ submitted: false, error: null, message: null });

  // Determine if the form section for subjects/uploads should be enabled
  const isSubjectSectionEnabled = formData.selectedRegulation && formData.selectedBranch && formData.selectedSemester && !loading.subjects;
  const isUploadEnabled = isSubjectSectionEnabled && formData.selectedSubjectCode && !isUploading;

  return (
    <div className="w-full max-w-4xl mx-auto bg-white shadow-2xl rounded-xl p-8 border border-gray-200">
      {submissionStatus.message && (
        <MessageModal message={submissionStatus.message} type={submissionStatus.error ? "error" : "success"} onClose={closeMessage} />
      )}

      <h2 className="text-3xl font-extrabold text-gray-800 mb-6 border-b pb-3 text-purple-700">Upload Question Bank (QB) per Subject</h2>
      <p className="text-gray-500 mb-8">Upload is associated with your Faculty ID: <strong>{auth?.facultyId || "N/A"}</strong></p>

      <form onSubmit={handleSubmit} className="space-y-8">
        {/* Regulation Selection */}
        <div className="p-4 bg-purple-50 rounded-lg shadow-sm">
          <label className="block font-semibold text-purple-700 mb-2">Choose Regulation:</label>
          <select
            name="regulation"
            value={formData.selectedRegulation?.regulationId || ""}
            onChange={handleRegulationChange}
            disabled={loading.regulations}
            className="w-full p-3 rounded-xl border border-purple-300 bg-white shadow-inner focus:ring-2 focus:ring-purple-500 transition disabled:bg-gray-200"
          >
            <option value="">{loading.regulations ? "Loading Regulations..." : "-- Select Regulation --"}</option>
            {regulations.map((reg) => (
              <option key={reg.regulationId} value={reg.regulationId}>{reg.display}</option>
            ))}
          </select>
        </div>

        {/* Branch & Semester */}
        {formData.selectedRegulation && (
          <div className="flex flex-col md:flex-row gap-4 p-4 bg-purple-50 rounded-lg shadow-sm">
            <div className="flex-1">
              <label className="block font-semibold text-purple-700 mb-2">Branch</label>
              <select value={formData.selectedBranch} onChange={handleBranchChange} className="w-full p-3 rounded-xl border border-purple-300 bg-white shadow-inner">
                <option value="">-- Select Branch --</option>
                {BRANCHES.map(b => <option key={b} value={b}>{b}</option>)}
              </select>
            </div>

            <div className="flex-1">
              <label className="block font-semibold text-purple-700 mb-2">Semester</label>
              <select value={formData.selectedSemester} onChange={handleSemesterChange} className="w-full p-3 rounded-xl border border-purple-300 bg-white shadow-inner">
                <option value="">-- Select Semester --</option>
                {SEMESTERS.map(s => <option key={s} value={s}>{s}</option>)}
              </select>
            </div>
          </div>
        )}

        {/* Subject Selection */}
        {isSubjectSectionEnabled && (
          <div className="p-4 bg-purple-50 rounded-lg shadow-sm">
            <label className="block font-semibold text-purple-700 mb-2">
              Choose Subject for Question Bank
              {loading.subjects && <span className="text-sm ml-2 text-gray-500">(Loading Subjects...)</span>}
            </label>
            <select
              value={formData.selectedSubjectCode}
              onChange={handleSubjectChange}
              disabled={!isSubjectSectionEnabled || loading.subjects || subjects.length === 0}
              className="w-full p-3 rounded-xl border border-purple-300 bg-white shadow-inner"
            >
              <option value="">{loading.subjects ? "Loading..." : (subjects.length === 0 ? "No Subjects Found" : "-- Select Subject --")}</option>
              {subjects.map((sub) => (
                <option key={sub.subjectCode} value={sub.subjectCode}>
                  {sub.subjectCode}: {sub.subjectName}
                </option>
              ))}
            </select>
          </div>
        )}

        {/* Single File Upload for QB */}
        {formData.selectedSubjectCode && (
          <div className="border border-gray-200 p-6 rounded-xl shadow-md bg-white flex flex-col md:flex-row items-center gap-4">
            
            <div className="w-full md:w-1/3">
              <label className="text-sm font-medium text-gray-600 block mb-1">Question Bank PDF:</label>
              <label
                className={`flex items-center gap-2 cursor-pointer text-white px-4 py-3 rounded-lg shadow-md w-full justify-center transition
                  ${isUploadEnabled ? "bg-purple-500 hover:bg-purple-600" : "bg-gray-400 cursor-not-allowed"}`}
                htmlFor="qb-file-input"
              >
                <UploadIcon className="h-5 w-5" />
                <span className="text-base font-medium">{formData.file ? "Change File" : "Upload Subject QB (PDF)"}</span>
                <input
                  id="qb-file-input"
                  ref={fileInputRef}
                  type="file"
                  accept=".pdf"
                  className="hidden"
                  disabled={!isUploadEnabled}
                  onChange={handleFileChange}
                />
              </label>
            </div>

            {/* File name display */}
            <div className="w-full md:flex-1 h-full pt-1 md:pt-0">
              {formData.file ? (
                <div className="text-sm text-green-600 truncate bg-green-50 p-3 rounded-lg border border-green-200 w-full font-mono">
                  <span className="font-semibold text-gray-700">Selected File:</span> {formData.file.name}
                </div>
              ) : (
                <span className="text-sm text-gray-400 p-3 block">Please select a PDF file for the subject's Question Bank.</span>
              )}
            </div>
          </div>
        )}

        {/* Submit */}
        <div className="flex justify-center pt-4">
          <button
            type="submit"
            // Button is disabled if uploading, or if any core fields (subject/file) are missing
            disabled={isUploading || !formData.selectedSubjectCode || !formData.file}
            className={`font-extrabold text-white px-12 py-3 rounded-full shadow-lg transition duration-300 ease-in-out w-full md:w-auto
              ${isUploading || !formData.selectedSubjectCode || !formData.file
                ? "bg-gray-400 cursor-not-allowed"
                : "bg-purple-600 hover:bg-purple-700 hover:shadow-xl transform hover:scale-105"
              }`}
          >
            {isUploading ? (
              <span className="flex items-center gap-2">
                <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
                Uploading...
              </span>
            ) : (
              "Submit Question Bank Now"
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default UploadQB;